{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const form = document.querySelector('.feedback-form');\n//создаю ключь для хранилища\nconst localStorageKey = \"feedback-form-state\";\nlet formData = {\n  email: \"\",\n  message: \"\",\n};\n\n//ф-ция - которая сразу вызывается (после того как пользователь зашёл на страницу):\n\n// беру значения с хранилища\n\nconst fillFormFields = () => {\n  try {\n        //первое посещение странички- данных в хранинилище нет?- проверка: если null сделать return// или проверить длинну LS до того как доставать данные/Данные могут использовать другие программы = сделаем проверку ниже (используя null)\n    // if (localStorage.length === 0) {\n    //   return;\n    // }\n    \n    const formDataFromLS = JSON.parse(localStorage.getItem(localStorageKey));\n\nif (formDataFromLS === null) {\n  return;\n}\n\n//если поменять данные в одном месте и перезайти = всё в др полях стирается - чтоб это поменять = когда достаем данные с LS сразу их записывать в обьект formDate.для того чтоб обновился и хранил все данные с LS\nformData = formDataFromLS;\n\n//на каждой итерации обращаться к форме к псевдомассиву ellements[с ключом key]- к значению value;Записшим  туда значение что достали с хранилища с ключом как у текущей итерации\n\nfor (let key in formDataFromLS) {\nform.elements[key].value = formDataFromLS[key]; \n};\n\n  } catch(error) {\n  console.log(error.name);\n  console.log(error.message);\n  }\n};\nfillFormFields();\n\nconsole.log(localStorageKey)\n\nconst onFormFieldChange = event => {\n  event.preventDefault();\n\n//целевой элем\n// const formEventEl = event.target;\n//деструкторизация \nconst { target: formEventEl } = event;\n\n//считать значения с input\n\nconst fieldValue = formEventEl.value\n\n\n//чтоб подставить значения в объект надо считать значения с атребутов- По значению этого атребута обращаемся к объекту\nconst fieldName = formEventEl.name\n\n//Обратиться к объекту с ключом, который соответсвует значению переменной [переменная]= значение переменной; \n//Записую в ключь значение что ввёл пользователь;\nformData[fieldName] = fieldValue;\n\n//отправляю объект в localStor-хранилище, переведя в строку JSON иначе [objectObject]\nlocalStorage.setItem(localStorageKey, JSON.stringify(formData));\n}\n\n\n\nform.addEventListener('input', onFormFieldChange);\n\n\n//чистка формы и LS при отправки ф-мы\nconst onFeedbackSubmit = event => {\n  event.preventDefault();\n  if (formData.email.trim() === '' || formData.message.trim() === '') {\n    alert('Fill please all fields');\n    return;\n  } else {\n    console.log(formData);\n  }\n\n// event.currentTarget.reset();\n//деструктуризация \nconst { currentTarget: formEL } = event;\nformEL.reset();\n\n//чистка LS\n  localStorage.removeItem(localStorageKey);\n};\n\nform.addEventListener('submit', onFeedbackSubmit);"],"names":["form","localStorageKey","formData","fillFormFields","formDataFromLS","key","error","onFormFieldChange","event","formEventEl","fieldValue","fieldName","onFeedbackSubmit","formEL"],"mappings":"wFAAA,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAE9CC,EAAkB,sBACxB,IAAIC,EAAW,CACb,MAAO,GACP,QAAS,EACX,EAMA,MAAMC,EAAiB,IAAM,CAC3B,GAAI,CAMF,MAAMC,EAAiB,KAAK,MAAM,aAAa,QAAQH,CAAe,CAAC,EAE3E,GAAIG,IAAmB,KACrB,OAIFF,EAAWE,EAIX,QAASC,KAAOD,EAChBJ,EAAK,SAASK,CAAG,EAAE,MAAQD,EAAeC,CAAG,CAG1C,OAAOC,EAAO,CACf,QAAQ,IAAIA,EAAM,IAAI,EACtB,QAAQ,IAAIA,EAAM,OAAO,CACxB,CACH,EACAH,IAEA,QAAQ,IAAIF,CAAe,EAE3B,MAAMM,EAAoBC,GAAS,CACjCA,EAAM,eAAc,EAKtB,KAAM,CAAE,OAAQC,CAAa,EAAGD,EAI1BE,EAAaD,EAAY,MAIzBE,EAAYF,EAAY,KAI9BP,EAASS,CAAS,EAAID,EAGtB,aAAa,QAAQT,EAAiB,KAAK,UAAUC,CAAQ,CAAC,CAC9D,EAIAF,EAAK,iBAAiB,QAASO,CAAiB,EAIhD,MAAMK,EAAmBJ,GAAS,CAEhC,GADAA,EAAM,eAAc,EAChBN,EAAS,MAAM,SAAW,IAAMA,EAAS,QAAQ,KAAM,IAAK,GAAI,CAClE,MAAM,wBAAwB,EAC9B,MACJ,MACI,QAAQ,IAAIA,CAAQ,EAKxB,KAAM,CAAE,cAAeW,CAAQ,EAAGL,EAClCK,EAAO,MAAK,EAGV,aAAa,WAAWZ,CAAe,CACzC,EAEAD,EAAK,iBAAiB,SAAUY,CAAgB"}